<?xml version="1.0" encoding="UTF-8"?>
<project name="org.mwc.cmap.geotools" default="build.jars" basedir=".">

	<property name="javacSource" value="1.7"/>
		<property name="javacTarget" value="1.7"/>
		<property name="build.compiler" value="extJavac"/>
		<condition property="dir_bootclasspath" value="${java.home}/../Classes">
			<and>
				<os family="mac"/>
				<available file="${java.home}/../Classes" type="dir"/>
			</and>
		</condition>
		<property name="dir_bootclasspath" value="${java.home}/lib"/>
		<path id="path_bootclasspath">
			<fileset dir="${dir_bootclasspath}">
				<include name="*.jar"/>
			</fileset>
		</path>
		<property name="bootclasspath" refid="path_bootclasspath"/>
		<condition property="bundleBootClasspath" value="${JavaSE-1.7}"	>
			<isset property="JavaSE-1.7"/>
		</condition>
		<property name="bundleBootClasspath" value="${bootclasspath}"/>	<target name="init">
		<condition property="pluginTemp" value="${buildTempFolder}/plugins"		>
			<isset property="buildTempFolder"/>
		</condition>
		<property name="pluginTemp" value="${basedir}"/>
		<condition property="build.result.folder" value="${pluginTemp}/org.mwc.cmap.geotools"		>
			<isset property="buildTempFolder"/>
		</condition>
		<property name="build.result.folder" value="${basedir}"/>
		<property name="temp.folder" value="${basedir}/temp.folder"/>
		<property name="plugin.destination" value="${basedir}"/>
		<condition property="p2.publish.parts" value="true"		>
			<istrue value="${p2.gathering}"/>
		</condition>
		<property name="compilation.problem.marker" value="${build.result.folder}/compilation.problem"/>
		<condition property="compilation.problem.marker.exists" value="true"		>
			<and>
			<available file="${compilation.problem.marker}"/>
			<isfalse value="${p2.publishonerror}"/>
			</and>
		</condition>
	</target>


	<target name="geotools_jar" depends="init" description="Build the plug-in: org.mwc.cmap.geotools for an update site.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<jar destfile="cmap_geotools.jar" basedir="${temp.folder}/org.mwc.cmap.geotools"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="@dot.nestedJars">
	</target>
	<target name="@dot" depends="init,@dot.nestedJars" unless="@dot" description="Create jar: org.mwc.cmap.geotools @dot.">
		<delete dir="${build.result.folder}/@dot"/>
		<mkdir dir="${build.result.folder}/@dot"/>
		<path id="@dot.classpath">
			<fileset dir="../org.mwc.cmap.jfreechart/libs" includes="*.jar"></fileset>
			<fileset dir="libs" includes="*.jar"></fileset>
			<pathelement location="../org.mwc.debrief.legacy/cmap_legacy.jar"/>
			<pathelement location="../org.mwc.debrief.legacy/debrief_legacy.jar"/>
			<fileset dir="../org.mwc.cmap.legacy/libs" includes="*.jar"></fileset>
			<fileset dir="../org.mwc.cmap.jfreechart/libs" includes="*.jar"></fileset>
			<fileset dir="../org.mwc.debrief.legacy/libs" includes="*.jar"></fileset>
			<fileset dir="libs" includes="*.jar"/>
		</path>
		<!-- compile the source code -->
		<javac destdir="${build.result.folder}/@dot" failonerror="true" includeAntRuntime="no"
			verbose="${javacVerbose}" >
			<classpath refid="@dot.classpath" />
			<src path="src/"			/>
		</javac>
		<!-- Copy necessary resources -->
		<copy todir="${build.result.folder}/@dot" failonerror="true" overwrite="false">
			<fileset dir="src/">
				<exclude name="**/*.java"/>
				<exclude name="**/package.htm*"/>
			</fileset>
		</copy>
	</target>

	<target name="src.zip" depends="init" unless="src.zip">
		<mkdir dir="${build.result.folder}"/>
		<antcall target="zip.src.zip"/>
	</target>
	<target name="zip.src.zip">
		<zip destfile="${build.result.folder}/src.zip" filesonly="false" whenempty="skip" update="false">
			<fileset dir="src/">
				<include name="**/*.java"/>
			</fileset>
		</zip>
	</target>
	<target name="copy.src.zip">
		<copy todir="${source.destination.folder}/" failonerror="true" overwrite="true">
			<fileset dir="src/">
				<include name="**/*.java"/>
			</fileset>
		</copy>
	</target>

	<target name="build.jars" depends="init" description="Compile classes and build nested jars for the plug-in: org.mwc.cmap.geotools.">
		<delete file="${compilation.problem.marker}" quiet="true"/>
		<available property="@dot" file="${build.result.folder}/@dot"/>
		<antcall target="@dot"/>
	</target>

	<target name="build.sources" depends="init">
		<available property="src.zip" file="${build.result.folder}/src.zip"/>
		<antcall target="src.zip"/>
	</target>

	<target name="publish.bin.parts" depends="init" if="p2.publish.parts" unless="compilation.problem.marker.exists">
		<mkdir dir="${build.result.folder}/org.mwc.cmap.geotools"/>
		<copy todir="${build.result.folder}" failonerror="true" overwrite="true">
			<fileset dir="${basedir}">
				<include name="META-INF/MANIFEST.MF"/>
			</fileset>
		</copy>
		<antcall target="apitools.generation">
			<param name="projectLocation" value="${basedir}"/>
			<param name="binary.folders" value="${build.result.folder}/@dot;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/commons-pool-1.5.4.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-api-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jai_core-1.1.3.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jt-utils-1.3.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/hsqldb-2.2.8.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jt-zonalstats-1.3.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-data-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-shapefile-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-swing-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jai_imageio-1.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jgridshift-1.0.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/imageio-ext-utilities-1.1.10.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-geotiff-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-referencing-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/json-simple-1.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jsr-275-1.0-beta-2.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-opengis-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-swt-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jai_codec-1.1.3.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-epsg-hsql-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jts-1.13.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/imageio-ext-tiff-1.1.10.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-coverage-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-main-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-geojson-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-cql-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jdom-1.1.3.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-metadata-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/vecmath-1.3.2.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-image-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-render-12.1.jar"/>
			<param name="projectName" value="${bundleId}_${bundleVersion}"/>
			<param name="target.folder" value="${build.result.folder}"/>
		</antcall>
		
	</target>

	<target name="gather.bin.parts" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/org.mwc.cmap.geotools"/>
		<copy todir="${destination.temp.folder}/org.mwc.cmap.geotools" failonerror="true" overwrite="false">
			<fileset dir="${build.result.folder}/@dot">
				<include name="**"/>
			</fileset>
		</copy>
		<copy todir="${destination.temp.folder}/org.mwc.cmap.geotools" failonerror="true" overwrite="true">
			<fileset dir="${basedir}">
				<include name="META-INF/"/>
				<include name="libs/"/>
				<include name="libs/gt-coverage-12.1.jar"/>
				<include name="libs/gt-epsg-hsql-12.1.jar"/>
				<include name="libs/gt-geojson-12.1.jar"/>
				<include name="libs/gt-geotiff-12.1.jar"/>
				<include name="libs/gt-image-12.1.jar"/>
				<include name="libs/gt-render-12.1.jar"/>
				<include name="libs/gt-swing-12.1.jar"/>
				<include name="libs/gt-swt-12.1.jar"/>
				<include name="libs/hsqldb-2.2.8.jar"/>
				<include name="libs/json-simple-1.1.jar"/>
				<include name="libs/jt-zonalstats-1.3.1.jar"/>
			</fileset>
		</copy>
		<antcall target="apitools.generation">
			<param name="projectLocation" value="${basedir}"/>
			<param name="binary.folders" value="${build.result.folder}/@dot;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/commons-pool-1.5.4.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-api-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jai_core-1.1.3.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jt-utils-1.3.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/hsqldb-2.2.8.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jt-zonalstats-1.3.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-data-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-shapefile-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-swing-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jai_imageio-1.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jgridshift-1.0.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/imageio-ext-utilities-1.1.10.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-geotiff-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-referencing-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/json-simple-1.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jsr-275-1.0-beta-2.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-opengis-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-swt-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jai_codec-1.1.3.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-epsg-hsql-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jts-1.13.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/imageio-ext-tiff-1.1.10.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-coverage-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-main-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-geojson-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-cql-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/jdom-1.1.3.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-metadata-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/vecmath-1.3.2.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-image-12.1.jar;C:\Users\Ayesha\git\debrief\org.mwc.cmap.geotools/libs/gt-render-12.1.jar"/>
			<param name="projectName" value="${bundleId}_${bundleVersion}"/>
			<param name="target.folder" value="${destination.temp.folder}/org.mwc.cmap.geotools"/>
		</antcall>
	</target>

	<target name="build.zips" depends="init">
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/org.mwc.cmap.geotools"/>
		<copy file="${build.result.folder}/src.zip" todir="${destination.temp.folder}/org.mwc.cmap.geotools" failonerror="false" overwrite="false"/>
		<antcall target="copy.src.includes">
			<param name="source.destination.folder" value="${destination.temp.folder}/org.mwc.cmap.geotools"/>
		</antcall>
	</target>

	<target name="gather.individual.sources" depends="init">
		<antcall target="copy.src.zip">
			<param name="source.destination.folder" value="${destination.temp.folder}"/>
		</antcall>
		<antcall target="copy.src.includes">
			<param name="source.destination.folder" value="${destination.temp.folder}"/>
		</antcall>
	</target>

	<target name="copy.src.includes" depends="init">
	</target>

	<target name="gather.logs" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/org.mwc.cmap.geotools"/>
		<copy todir="${destination.temp.folder}/org.mwc.cmap.geotools" failonerror="false" overwrite="false">
			<fileset dir="${build.result.folder}">
				<include name="@dot${logExtension}"/>
			</fileset>
		</copy>
	</target>

	<target name="clean" depends="init" description="Clean the plug-in: org.mwc.cmap.geotools of all the zips, jars and logs created.">
		<delete dir="${build.result.folder}/@dot"/>
		<delete file="${build.result.folder}/src.zip"/>
		<delete file="${plugin.destination}/org.mwc.cmap.geotools.jar"/>
		<delete file="${plugin.destination}/org.mwc.cmap.geotools.zip"/>
		<delete dir="${temp.folder}"/>
		<delete file="${compilation.problem.marker}" quiet="true"/>
	</target>

	<target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: org.mwc.cmap.geotools.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="build.sources"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<delete>
			<fileset dir="${temp.folder}">
				<include name="**/*.bin${logExtension}"/>
			</fileset>
		</delete>
		<zip destfile="${plugin.destination}/org.mwc.cmap.geotools.zip" basedir="${temp.folder}" filesonly="true" whenempty="skip" update="false"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="apitools.generation" if="generateAPIDescription">
		<apitooling.apigeneration  projectName="${projectName}" project="${projectLocation}" binary="${binary.folders}" target="${target.folder}" extramanifests="${extraManifests}" allownonapiproject="${allowNonApiProject}"		/>
	</target>

</project>
